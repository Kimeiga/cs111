---
layout: post
title:  "Chapter 5"
date:   2018-10-07 22:56:23 -0700
---

## The fork() System Call

The fork() system call is used to create a new process

**Calling fork()** `(p1.c)`

{% highlight c %}
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int main(int argc, char* argv[]) {
	printf("hello world (pid:%d)\n", (int) getpid());
	int rc = fork();
	if (rc < 0) {         // fork failed; exit
		fprintf(stderr, "fork failed\n");
		exit(1);
	} else if (rc == 0) { // child (new process)
		printf("hello, I am child (pid:%d)\n", (int) getpid());
	} else {              // parent goes down this path (main)
		printf("hello, I am parent of %d (pid:%d)\n",
		rc, (int) getpid());
	}
	return 0;
}
{% endhighlight %}

{% highlight bash %}
prompt> ./p1
hello world (pid:29146)
hello, I am parent of 29147 (pid:29146)
hello, I am child (pid:29147)
prompt>
{% endhighlight %}

When it first started running, the process prints out a hello world message; included in that message is its **process identifier**, also known as a **PID**.

The odd part: the process that is created is an (almost) exact copy of the calling process.

The newly-created process (called the **child**, in contrast to the creating **parent**) doesn’t start running at main(), like you might expect (note, the “hello, world” message only got printed out once); rather, it just comes into life as if it had called fork() itself. 

Specifically, although it now has its own copy of the address space (i.e., its own private memory), its own registers, its own PC, and so forth, the value it returns to the caller of **fork()** is different. Specifically, while the parent receives the PID of the newly-created child, the child receives a return code of zero.

**Calling fork() And wait()** `(p2.c)`

{% highlight c %}
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>

int main(int argc, char* argv[]) {
	printf("hello world (pid:%d)\n", (int) getpid());
	int rc = fork();
	if (rc < 0) {         // fork failed; exit
		fprintf(stderr, "fork failed\n");
		exit(1);
	} else if (rc == 0) { // child (new process)
		printf("hello, I am child (pid:%d)\n", (int) getpid());
	} else {              // parent goes down this path (main)
		int rc_wait = wait(NULL);
	printf("hello, I am parent of %d (rc_wait:%d) (pid:%d)\n",
		rc, rc_wait, (int) getpid());
	}
	return 0;
}
{% endhighlight %}

You might also have noticed: the output (of p1.c) is not deterministic.

{% highlight bash %}
prompt> ./p1
hello world (pid:29146)
hello, I am child (pid:29147)
hello, I am parent of 29147 (pid:29146)
prompt>
{% endhighlight %}

The CPU **scheduler**, a topic we’ll discuss in great detail soon, determines which process runs at a given moment in time; because the scheduler is complex, we cannot usually make strong assumptions about what it will choose to do, and hence which process will run first. This **nondeterminism**, as it turns out, leads to some interesting problems, particularly in **multi-threaded** programs; hence, we’ll see a lot more non-determinism when we study **concurrency** in the second part of the book.

## The wait() System Call

The parent process calls wait() to delay its execution until the child finishes executing.  When the child is done, wait() returns to the parent

{% highlight c %}
prompt> ./p2
hello world (pid:29266)
hello, I am child (pid:29267)
hello, I am parent of 29267 (rc_wait:29267) (pid:29266)
prompt>
{% endhighlight %}

## Finally, The exec() System Call

{% highlight bash %}
prompt> ./p3
hello world (pid:29383)
hello, I am child (pid:29384)
29     107    1030 p3.c
hello, I am parent of 29384 (rc_wait:29384) (pid:29383)
prompt>
{% endhighlight %}

**Calling fork(), wait(), And exec()** `(p3.c)`

{% highlight c %}
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/wait.h>

int main(int argc, char* argv[]) {
	printf("hello world (pid:%d)\n", (int) getpid());
	int rc = fork();
	if (rc < 0) {         // fork failed; exit
		fprintf(stderr, "fork failed\n");
		exit(1);
	} else if (rc == 0) { // child (new process)
		printf("hello, I am child (pid:%d)\n", (int) getpid());
		char* myargs[3];
		myargs[0] = strdup("wc");   // program: "wc" (word count)
		myargs[1] = strdup("p3.c"); // argument: file to count
		myargs[2] = NULL;           // marks end of array
		execvp(myargs[0], myargs);  // runs word count
		printf("this shouldn’t print out");
	} else {              // parent goes down this path (main)
		int rc_wait = wait(NULL);
		printf("hello, I am parent of %d (rc_wait:%d) (pid:%d)\n",
			rc, rc_wait, (int) getpid());
	}
	return 0;
}
{% endhighlight %}

What it does: given the name of an executable (e.g., wc), and some arguments (e.g., p3.c), it loads code (and static data) from that executable and overwrites its current code segment (and current static data) with it; the heap and stack and other parts of the memory space of the program are re-initialized.

## Why? Motivating The API

The shell is just a user program. It shows you a **prompt** and then waits for you to type something into it

In the example above, the output of the program wc is **redirected** into the output file newfile.txt (the greater-than sign is how said redirection is indicated). The way the shell accomplishes this task is quite simple: when the child is created, before calling exec(), the shell closes **standard output** and opens the file newfile.txt. By doing so, any output from the soon-to-be-running program wc are sent to the file instead of the screen.

{% highlight bash %}
prompt> ./p4
prompt> cat p4.output
32     109     846 p4.c
prompt>
{% endhighlight %}

**All Of The Above With Redirection** `(p4.c)`

{% highlight c %}
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <fcntl.h>
#include <sys/wait.h>

int main(int argc, char* argv[]) {
	int rc = fork();
	if (rc < 0) {          // fork failed; exit
		fprintf(stderr, "fork failed\n");
		exit(1);
	} else if (rc == 0) { // child: redirect standard output to a file
		close(STDOUT_FILENO);
		open("./p4.output", O_CREAT|O_WRONLY|O_TRUNC, S_IRWXU);
		// now exec "wc"...
		char* myargs[3];
		myargs[0] = strdup("wc");   // program: "wc" (word count)
		myargs[1] = strdup("p4.c"); // argument: file to count
		myargs[2] = NULL;           // marks end of array
		execvp(myargs[0], myargs);  // runs word count
	} else {              // parent goes down this path (main)
		int rc_wait = wait(NULL);
	}
	return 0;
}
{% endhighlight %}

In this case, the output of one process is connected to an in-kernel **pipe** (i.e., queue), and the input of another process is connected to that same pipe; thus, the output of one process seamlessly is used as input to the next, and long and useful chains of commands can be strung together.

## Process Control and Users

For example, the kill() system call is used to send **signals** to a process, including directives to pause, die, and other useful imperatives.

The entire signals subsystem provides a rich infrastructure to deliver external events to processes, including ways to receive and process those signals within individual processes, and ways to send signals to individual processes as well as entire **process groups**.

As a result, modern systems include a strong conception of the notion of a **user**. The user, after entering a password to establish credentials, logs in to gain access to system resources.

## Useful Tools

For example, using the `ps` command allows you to see which processes are running; read the **man pages** for some useful flags to pass to ps.

Finally, there are many different kinds of CPU meters you can use to get a quick glance understanding of the load on your system; for example, we always keep MenuMeters (from Raging Menace software) running on our Macintosh toolbars, so we can see how much CPU is being utilized at any moment in time.

## Summary

- Each process has a name; in most systems, that name is a number known as a **process ID** (**PID**).
- The **fork()** system call is used in UNIX systems to create a new process. The creator is called the **parent**; the newly created process is called the **child**. As sometimes occurs in real life, the child process is a nearly identical copy of the parent.
- The **wait()** system call allows a parent to wait for its child to complete execution.
- The **exec()** family of system calls allows a child to break free from its similarity to its parent and execute an entirely new program.
- A UNIX shell commonly uses **fork()**, **wait()**, and **exec()** to launch user commands; the separation of fork and exec enables features like input/output redirection, pipes, and other cool features, all without changing anything about the programs being run.
- Process control is available in the form of **signals**, which can cause jobs to stop, continue, or even terminate.
- Which processes can be controlled by a particular person is encapsulated in the notion of a **user**; the operating system allows multiple users onto the system, and ensures users can only control their own processes.
- A **superuser** can control all processes (and indeed do many other things); this role should be assumed infrequently and with caution for security reasons